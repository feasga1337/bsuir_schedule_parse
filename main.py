import requests
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta
import time
import threading
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename='bot.log', format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_URL = "https://iis.bsuir.by/api/v1"
TOKEN = "your_token"
bot = telebot.TeleBot(TOKEN)

user_data = {}  # –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
reminder_threads = {}  # –•—Ä–∞–Ω–∏—Ç –ø–æ—Ç–æ–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π


class User:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.group_name = None
        self.subgroup = None
        self.receive_reminders = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
        self.schedule_format = "full"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    def set_group(self, group_name):
        self.group_name = group_name

    def set_subgroup(self, subgroup):
        self.subgroup = subgroup

    def toggle_reminders(self, status):
        self.receive_reminders = status

    def set_schedule_format(self, format_type):
        self.schedule_format = format_type


def get_current_week():
    try:
        response = requests.get(f"{API_URL}/schedule/current-week", timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏: {e}")
        return None


def format_schedule(schedule, current_week, subgroup, format_type="full"):
    try:
        week_days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        today = datetime.today()
        start_of_week = today - timedelta(days=today.weekday())
        week_dates = {week_days[i]: (start_of_week + timedelta(days=i)).strftime("%d.%m") for i in range(7)}

        if format_type == "today":
            current_day = week_days[today.weekday()]
            result = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {current_day} ({week_dates[current_day]}):*\n\n"
            days_to_show = [current_day]
        else:
            result = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({week_dates['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫']} - {week_dates['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']}):*\n\n"
            days_to_show = week_days

        for day in days_to_show:
            date = week_dates.get(day, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            lessons_for_day = []

            if day in schedule:
                for lesson in schedule[day]:
                    week_numbers = lesson.get("weekNumber")
                    lesson_subgroup = lesson.get("numSubgroup")

                    if (week_numbers is None or current_week in week_numbers) and \
                            (lesson_subgroup is None or lesson_subgroup == 0 or lesson_subgroup == subgroup):
                        subject = lesson["subject"]
                        lesson_type = lesson.get("lessonTypeAbbrev", "")
                        time = f"{lesson['startLessonTime']} - {lesson['endLessonTime']}"
                        auditories = ", ".join(lesson.get("auditories", ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"]))
                        teacher = ", ".join(
                            f"{t['lastName']} {t['firstName']} {t['middleName']}"
                            for t in lesson.get("employees", [])
                        ) or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"

                        lessons_for_day.append(f"üïí {time} | {subject} ({lesson_type})\nüè´ {auditories}\nüë®‚Äçüè´ {teacher}\n")

            result += f"üìå *{day}, {date}:*\n"
            result += "\n".join(lessons_for_day) if lessons_for_day else "üî∏ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π\n"
            result += "\n"

        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"


def get_schedule(group_number):
    try:
        response = requests.get(f"{API_URL}/schedule?studentGroup={group_number}", timeout=10)
        response.raise_for_status()
        return response.json().get("schedules")
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None


def send_reminder(chat_id, subject, start_time, auditories, teacher):
    try:
        message = (f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –ø–∞—Ä–∞!\n"
                   f"üìö –ü—Ä–µ–¥–º–µ—Ç: *{subject}*\n"
                   f"üïí –í—Ä–µ–º—è: {start_time}\n"
                   f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {auditories}\n"
                   f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}")
        bot.send_message(chat_id, message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


def get_previous_lesson_end(schedule, today, lesson_start_time, current_week, subgroup):
    try:
        if today not in schedule:
            return None
        lessons = [l for l in schedule[today] if
                   (l.get("weekNumber") is None or current_week in l.get("weekNumber")) and
                   (l.get("numSubgroup") is None or l.get("numSubgroup") == 0 or l.get("numSubgroup") == subgroup)]
        lessons.sort(key=lambda x: x["endLessonTime"])

        for lesson in lessons:
            end_time = datetime.strptime(f"{datetime.now().strftime('%Y-%m-%d')} {lesson['endLessonTime']}",
                                         "%Y-%m-%d %H:%M")
            start_time = datetime.strptime(f"{datetime.now().strftime('%Y-%m-%d')} {lesson_start_time}",
                                           "%Y-%m-%d %H:%M")
            if end_time < start_time:
                return end_time
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞—Ä—ã: {e}")
        return None


def schedule_reminders(chat_id, schedule, current_week, subgroup):
    try:
        while True:
            now = datetime.now()
            current_day = now.strftime("%A")
            day_mapping = {
                "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
                "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞",
                "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            }
            today = day_mapping.get(current_day)

            if today in schedule:
                for lesson in schedule[today]:
                    week_numbers = lesson.get("weekNumber")
                    lesson_subgroup = lesson.get("numSubgroup")

                    if (week_numbers is None or current_week in week_numbers) and \
                            (lesson_subgroup is None or lesson_subgroup == 0 or lesson_subgroup == subgroup):
                        lesson_time = lesson['startLessonTime']
                        lesson_start = datetime.strptime(f"{now.strftime('%Y-%m-%d')} {lesson_time}", "%Y-%m-%d %H:%M")

                        prev_end = get_previous_lesson_end(schedule, today, lesson_time, current_week, subgroup)
                        if prev_end:
                            reminder_time = prev_end
                        else:
                            reminder_time = lesson_start - timedelta(hours=1)

                        time_diff = (lesson_start - now).total_seconds()
                        reminder_diff = (reminder_time - now).total_seconds()

                        if 0 < reminder_diff <= 60 and time_diff > 0:
                            subject = lesson["subject"]
                            auditories = ", ".join(lesson.get("auditories", ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"]))
                            teacher = ", ".join(
                                f"{t['lastName']} {t['firstName']} {t['middleName']}"
                                for t in lesson.get("employees", [])
                            ) or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
                            send_reminder(chat_id, subject, lesson_time, auditories, teacher)
                            time.sleep(61)

            time.sleep(60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


@bot.message_handler(commands=["start"])
def start(message):
    try:
        chat_id = message.chat.id
        if chat_id not in user_data:
            user_data[chat_id] = User(chat_id)

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
        markup.add(KeyboardButton("üîç –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã"))
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        bot.send_message(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@bot.message_handler(func=lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings(message):
    try:
        chat_id = message.chat.id
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("üìö –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
                   KeyboardButton("üìã –§–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"), KeyboardButton("‚Ü© –ù–∞–∑–∞–¥"))
        bot.send_message(chat_id, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:", reply_markup=markup)
        bot.register_next_step_handler(message, process_settings)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {e}")


def process_settings(message):
    try:
        chat_id = message.chat.id
        if message.text == "üìö –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
            bot.send_message(chat_id, "üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
            bot.register_next_step_handler(message, choose_group_manually)
        elif message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(KeyboardButton("–í–∫–ª—é—á–∏—Ç—å"), KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å"))
            bot.send_message(chat_id, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)
            bot.register_next_step_handler(message, toggle_reminders)
        elif message.text == "üìã –§–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(KeyboardButton("–ü–æ–ª–Ω–æ–µ"), KeyboardButton("–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è"))
            bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(message, set_schedule_format)
        elif message.text == "‚Ü© –ù–∞–∑–∞–¥":
            start(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


def choose_group_manually(message):
    try:
        chat_id = message.chat.id
        group_name = message.text.strip().upper()
        user_data[chat_id].set_group(group_name)

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("1"), KeyboardButton("2"), KeyboardButton("–ù–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—ã"))
        bot.send_message(chat_id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: {group_name}\nüìÇ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:",
                         reply_markup=markup)
        bot.register_next_step_handler(message, choose_subgroup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}")


def choose_subgroup(message):
    try:
        chat_id = message.chat.id
        text = message.text.strip()

        if text in ["1", "2"]:
            user_data[chat_id].set_subgroup(int(text))
        elif text == "–ù–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—ã":
            user_data[chat_id].set_subgroup(None)
        else:
            bot.send_message(chat_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        bot.send_message(chat_id, f"‚úÖ –ü–æ–¥–≥—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞: {text}")
        start(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã: {e}")


def toggle_reminders(message):
    try:
        chat_id = message.chat.id
        if message.text == "–í–∫–ª—é—á–∏—Ç—å":
            user_data[chat_id].toggle_reminders(True)
            bot.send_message(chat_id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å":
            user_data[chat_id].toggle_reminders(False)
            bot.send_message(chat_id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
        start(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


def set_schedule_format(message):
    try:
        chat_id = message.chat.id
        if message.text == "–ü–æ–ª–Ω–æ–µ":
            user_data[chat_id].set_schedule_format("full")
            bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        elif message.text == "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è":
            user_data[chat_id].set_schedule_format("today")
            bot.send_message(chat_id, "‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        start(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")


@bot.message_handler(commands=["schedule"])
@bot.message_handler(func=lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def send_schedule(message):
    try:
        chat_id = message.chat.id
        user = user_data.get(chat_id)

        if not user or not user.group_name:
            bot.send_message(chat_id, "‚ö† –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—É –≤ ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            return

        schedule = get_schedule(user.group_name)
        if not schedule:
            bot.send_message(chat_id, "üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        current_week = get_current_week()
        if current_week is None:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏!")
            return

        bot.send_message(chat_id, format_schedule(schedule, current_week, user.subgroup, user.schedule_format),
                         parse_mode='Markdown')

        if user.receive_reminders:
            if chat_id in reminder_threads:
                del reminder_threads[chat_id]
            reminder_thread = threading.Thread(target=schedule_reminders,
                                               args=(chat_id, schedule, current_week, user.subgroup))
            reminder_thread.daemon = True
            reminder_thread.start()
            reminder_threads[chat_id] = reminder_thread

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        bot.send_message(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@bot.message_handler(func=lambda message: message.text == "üîç –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã")
def other_group_schedule(message):
    try:
        chat_id = message.chat.id
        bot.send_message(chat_id, "üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
        bot.register_next_step_handler(message, process_other_group)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã: {e}")


def process_other_group(message):
    try:
        chat_id = message.chat.id
        group_name = message.text.strip().upper()

        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("1"), KeyboardButton("2"), KeyboardButton("–ù–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—ã"))
        bot.send_message(chat_id, f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: {group_name}\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=markup)
        bot.register_next_step_handler(message, process_other_group_subgroup, group_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã: {e}")


def process_other_group_subgroup(message, group_name):
    try:
        chat_id = message.chat.id
        text = message.text.strip()
        subgroup = None

        if text in ["1", "2"]:
            subgroup = int(text)
        elif text != "–ù–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—ã":
            bot.send_message(chat_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        schedule = get_schedule(group_name)
        if not schedule:
            bot.send_message(chat_id, "üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        current_week = get_current_week()
        if current_week is None:
            bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏!")
            return

        user = user_data.get(chat_id)
        format_type = user.schedule_format if user else "full"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        bot.send_message(chat_id, format_schedule(schedule, current_week, subgroup, format_type), parse_mode='Markdown')
        start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã: {e}")
        bot.send_message(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


if __name__ == "__main__":
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
bot.infinity_polling()